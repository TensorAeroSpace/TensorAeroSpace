#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∞ ControlBenchmark
–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
"""

import matplotlib.pyplot as plt
import numpy as np

from tensoraerospace.benchmark.bench import ControlBenchmark


def generate_sample_system_response(
    time, overshoot=0.2, settling_time=3.0, noise_level=0.01
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π –æ—Ç–∫–ª–∏–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

    Args:
        time (np.ndarray): –í—Ä–µ–º–µ–Ω–Ω–æ–π –º–∞—Å—Å–∏–≤
        overshoot (float): –ü–µ—Ä–µ—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (0.0 - 1.0)
        settling_time (float): –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        noise_level (float): –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞

    Returns:
        tuple: (control_signal, system_signal)
    """
    # –ó–∞–¥–∞—é—â–∏–π —Å–∏–≥–Ω–∞–ª (—Å—Ç—É–ø–µ–Ω—á–∞—Ç—ã–π)
    control_signal = np.ones_like(time)
    control_signal[time < 1.0] = 0

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    wn = 4.0 / settling_time  # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞
    zeta = -np.log(overshoot) / np.sqrt(
        np.pi**2 + np.log(overshoot) ** 2
    )  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è

    # –û—Ç–∫–ª–∏–∫ —Å–∏—Å—Ç–µ–º—ã –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –Ω–∞ —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
    system_signal = np.zeros_like(time)

    for i, t in enumerate(time):
        if t >= 1.0:
            tau = t - 1.0
            if zeta < 1.0:  # –ù–µ–¥–æ–¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
                wd = wn * np.sqrt(1 - zeta**2)
                response = 1 - np.exp(-zeta * wn * tau) * (
                    np.cos(wd * tau) + (zeta * wn / wd) * np.sin(wd * tau)
                )
            else:  # –ü–µ—Ä–µ–¥–µ–º–ø—Ñ–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
                r1 = -wn * (zeta + np.sqrt(zeta**2 - 1))
                r2 = -wn * (zeta - np.sqrt(zeta**2 - 1))
                response = 1 + (r2 * np.exp(r1 * tau) - r1 * np.exp(r2 * tau)) / (
                    r2 - r1
                )

            system_signal[i] = response

    # –î–æ–±–∞–≤–ª—è–µ–º —à—É–º
    system_signal += np.random.normal(0, noise_level, len(system_signal))

    return control_signal, system_signal


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–µ–Ω—á–º–∞—Ä–∫–∞.
    """
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞ TensorAeroSpace")
    print("=" * 60)

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–∞—Å—Å–∏–≤
    dt = 0.01
    time = np.arange(0, 10, dt)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–Ω—á–º–∞—Ä–∫–∞
    benchmark = ControlBenchmark()

    print("\n1Ô∏è‚É£  –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("-" * 40)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    control_signal, system_signal = generate_sample_system_response(
        time, overshoot=0.15, settling_time=2.5, noise_level=0.005
    )

    # –°—Ç—Ä–æ–∏–º –∫—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞—Ñ–∏–∫
    metrics = benchmark.plot(
        control_signal,
        system_signal,
        signal_val=0.5,
        dt=dt,
        tps=time,
        title="–ê–Ω–∞–ª–∏–∑ –ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä–∞",
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = benchmark.generate_report(
        control_signal,
        system_signal,
        signal_val=0.5,
        dt=dt,
        system_name="–ü–ò–î-—Ä–µ–≥—É–ª—è—Ç–æ—Ä",
    )
    print(report)

    print("\n2Ô∏è‚É£  –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    print("-" * 50)

    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏—Å—Ç–µ–º
    systems_data = {}

    # –°–∏—Å—Ç–µ–º–∞ 1: –ë—ã—Å—Ç—Ä–∞—è —Å –ø–µ—Ä–µ—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    control1, system1 = generate_sample_system_response(
        time, overshoot=0.25, settling_time=1.5, noise_level=0.003
    )
    systems_data["–ë—ã—Å—Ç—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞"] = {
        "control_signal": control1,
        "system_signal": system1,
        "time": time,
    }

    # –°–∏—Å—Ç–µ–º–∞ 2: –ú–µ–¥–ª–µ–Ω–Ω–∞—è –±–µ–∑ –ø–µ—Ä–µ—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    control2, system2 = generate_sample_system_response(
        time, overshoot=0.05, settling_time=4.0, noise_level=0.002
    )
    systems_data["–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"] = {
        "control_signal": control2,
        "system_signal": system2,
        "time": time,
    }

    # –°–∏—Å—Ç–µ–º–∞ 3: –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è
    control3, system3 = generate_sample_system_response(
        time, overshoot=0.10, settling_time=2.0, noise_level=0.004
    )
    systems_data["–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞"] = {
        "control_signal": control3,
        "system_signal": system3,
        "time": time,
    }

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—ã
    all_metrics = benchmark.compare_systems(systems_data, signal_val=0.5, dt=dt)

    # –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –∫–æ–Ω—Å–æ–ª—å
    print("\nüìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫:")
    print("-" * 80)
    print(
        f"{'–°–∏—Å—Ç–µ–º–∞':<20} {'–ü–µ—Ä–µ—Ä–µ–≥.%':<12} {'–í—Ä–µ–º—è —É—Å—Ç.':<12} {'–ó–∞—Ç—É—Ö–∞–Ω–∏–µ':<12} {'–°—Ç–∞—Ç.–æ—à–∏–±–∫–∞':<12}"
    )
    print("-" * 80)

    for system_name, metrics in all_metrics.items():
        print(
            f"{system_name:<20} {metrics['overshoot']:<12.2f} "
            f"{metrics['settling_time']:<12.3f} {metrics['damping_degree']:<12.3f} "
            f"{metrics['static_error']:<12.4f}"
        )

    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞:")
    print("   ‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫")
    print("   ‚Ä¢ –¢–∞–±–ª–∏—Ü—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("   ‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏—Å—Ç–µ–º")
    print("   ‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –æ—à–∏–±–æ–∫ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("   ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã —Å –æ—Ü–µ–Ω–∫–∞–º–∏")
    print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã")


if __name__ == "__main__":
    main()
