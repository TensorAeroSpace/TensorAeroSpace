#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ ControlBenchmark —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏.

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
- –ê–Ω–∞–ª–∏–∑ –æ–¥–∏–Ω–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
- –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏—Å—Ç–µ–º
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –º–µ—Ç—Ä–∏–∫
"""

import matplotlib.pyplot as plt
import numpy as np
from bench import ControlBenchmark


def generate_sample_system_response(
    time_points, overshoot=10.0, settling_time=5.0, noise_level=0.01
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–∑–µ—Ü –æ—Ç–∫–ª–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.

    Args:
        time_points: –ú–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
        overshoot: –ü–µ—Ä–µ—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        settling_time: –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        noise_level: –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞

    Returns:
        –ú–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç–∫–ª–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    """
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    zeta = 0.7 - (overshoot / 100.0) * 0.5  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞—Ç—É—Ö–∞–Ω–∏—è
    wn = 4.0 / settling_time  # –°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤—Ç–æ—Ä–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
    if zeta < 1.0:
        wd = wn * np.sqrt(1 - zeta**2)
        response = 1 - np.exp(-zeta * wn * time_points) * (
            np.cos(wd * time_points) + (zeta * wn / wd) * np.sin(wd * time_points)
        )
    else:
        # –ê–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        r1 = -wn * (zeta + np.sqrt(zeta**2 - 1))
        r2 = -wn * (zeta - np.sqrt(zeta**2 - 1))
        response = 1 + (
            r2 * np.exp(r1 * time_points) - r1 * np.exp(r2 * time_points)
        ) / (r2 - r1)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º
    noise = np.random.normal(0, noise_level, len(time_points))
    response += noise

    return response


def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ ControlBenchmark —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏."""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ ControlBenchmark —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏")
    print("=" * 70)

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–Ω—á–º–∞—Ä–∫–∞
    benchmark = ControlBenchmark()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    time_points = np.linspace(0, 10, 1000)
    dt = time_points[1] - time_points[0]

    # –°–∏—Å—Ç–µ–º–∞ 1: –•–æ—Ä–æ—à–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    control_signal_1 = np.ones_like(time_points)
    system_signal_1 = generate_sample_system_response(
        time_points, overshoot=5.0, settling_time=3.0
    )

    print("\nüìä –ê–Ω–∞–ª–∏–∑ –æ–¥–∏–Ω–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏:")
    print("-" * 50)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    benchmark.plot(
        control_signal_1,
        system_signal_1,
        signal_val=1.0,
        dt=dt,
        title="–•–æ—Ä–æ—à–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
    )
    plt.show()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    report = benchmark.generate_report(
        control_signal_1,
        system_signal_1,
        signal_val=1.0,
        dt=dt,
        system_name="–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
    )
    print(report)

    print("\nüìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–∏—Å—Ç–µ–º —Å –Ω–æ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏:")
    print("-" * 50)

    # –°–∏—Å—Ç–µ–º–∞ 2: –ü–µ—Ä–µ–∫–æ–ª–µ–±–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    system_signal_2 = generate_sample_system_response(
        time_points, overshoot=25.0, settling_time=5.0
    )

    # –°–∏—Å—Ç–µ–º–∞ 3: –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    system_signal_3 = generate_sample_system_response(
        time_points, overshoot=2.0, settling_time=8.0
    )

    # –°–∏—Å—Ç–µ–º–∞ 4: –ë—ã—Å—Ç—Ä–∞—è –Ω–æ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è
    system_signal_4 = generate_sample_system_response(
        time_points, overshoot=35.0, settling_time=2.5
    )

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º
    systems_data = {
        "–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è": (control_signal_1, system_signal_1),
        "–ü–µ—Ä–µ–∫–æ–ª–µ–±–∞—Ç–µ–ª—å–Ω–∞—è": (control_signal_1, system_signal_2),
        "–ú–µ–¥–ª–µ–Ω–Ω–∞—è": (control_signal_1, system_signal_3),
        "–ë—ã—Å—Ç—Ä–∞—è/–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è": (control_signal_1, system_signal_4),
    }

    benchmark.compare_systems(
        systems_data,
        signal_val=1.0,
        dt=dt,
        title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏)",
    )
    plt.show()

    print("\nüîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫:")
    print("-" * 30)

    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    metrics = benchmark.becnchmarking_one_step(
        control_signal_1, system_signal_1, signal_val=1.0, dt=dt
    )

    print(f"üìè –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:")
    print(f"   ‚Ä¢ –í—Ä–µ–º—è –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è: {metrics['rise_time']:.3f} —Å")
    print(f"   ‚Ä¢ –í—Ä–µ–º—è –ø–∏–∫–∞: {metrics['peak_time']:.3f} —Å")
    print(f"   ‚Ä¢ –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {metrics['settling_time']:.3f} —Å")

    print(f"\nüìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞:")
    print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {metrics['maximum_deviation']:.3f}")
    print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–µ–±–∞–Ω–∏–π: {metrics['oscillation_count']}")
    print(f"   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏–≤—à–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ: {metrics['steady_state_value']:.3f}")

    print(f"\nüéØ –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
    print(f"   ‚Ä¢ IAE (–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è –∞–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞): {metrics['iae']:.2f}")
    print(f"   ‚Ä¢ ISE (–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è –∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞): {metrics['ise']:.2f}")
    print(f"   ‚Ä¢ ITAE (–í–∑–≤–µ—à–µ–Ω–Ω–∞—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–±—Å. –æ—à–∏–±–∫–∞): {metrics['itae']:.2f}")
    print(f"   ‚Ä¢ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞: {metrics['performance_index']:.3f}")

    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–∞—é—Ç:")
    print("‚Ä¢ üïê –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–≤—Ä–µ–º—è –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è, –≤—Ä–µ–º—è –ø–∏–∫–∞)")
    print("‚Ä¢ üìà –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ (–º–∞–∫—Å. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, –∫–æ–ª–µ–±–∞–Ω–∏—è)")
    print("‚Ä¢ üéØ –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (IAE, ISE, ITAE)")
    print("‚Ä¢ üèÜ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("‚Ä¢ üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    print("‚Ä¢ üìã –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã")


if __name__ == "__main__":
    main()
