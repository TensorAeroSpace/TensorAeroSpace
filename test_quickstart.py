#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π quickstart.ipynb
"""

import sys
sys.path.append('/Users/asmazaev/Projects/TensorAeroSpace')

import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm

# TensorAeroSpace –∏–º–ø–æ—Ä—Ç—ã
from tensoraerospace.envs import LinearLongitudinalF16
from tensoraerospace.agent.pid import PID
from tensoraerospace.signals import unit_step
from tensoraerospace.utils import generate_time_period, convert_tp_to_sec_tp

def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤
        from tensoraerospace.envs import LinearLongitudinalF16
        from tensoraerospace.agent.pid import PID
        from tensoraerospace.signals import unit_step
        from tensoraerospace.utils import generate_time_period, convert_tp_to_sec_tp
        import matplotlib.pyplot as plt
        
        # –¢–µ—Å—Ç matplotlib —Å—Ç–∏–ª—è
        try:
            plt.style.use('seaborn-v0_8')
        except OSError:
            plt.style.use('seaborn')
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        dt = 0.01
        simulation_time = 1.0  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç
        tp = generate_time_period(tn=simulation_time, dt=dt)
        reference_signal = unit_step(tp, degree=0.1, time_step=0.5)
        initial_state = np.array([[0.0], [0.0]])
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–µ–¥—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        env_f16 = LinearLongitudinalF16(
            initial_state=initial_state,
            reference_signal=reference_signal,
            number_time_steps=len(tp)
        )
        print("‚úÖ –°—Ä–µ–¥–∞ F-16 —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è PID –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        pid_controller = PID(
            env=env_f16,
            kp=1.0,
            ki=0.1,
            kd=0.05,
            dt=dt
        )
        print("‚úÖ PID –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏
        state = initial_state.copy()
        
        for i in range(min(10, len(tp))):
            # –£–ø—Ä–∞–≤–ª—è—é—â–∏–π —Å–∏–≥–Ω–∞–ª
            control = pid_controller.select_action(reference_signal[i], state[1])
            
            # –û—à–∏–±–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
            error = reference_signal[i] - state[1]
            
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
            state = state + 0.01 * np.array([[control[0]], [control[0]]])
            
        print("‚úÖ –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    try:
        test_basic_functionality()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! quickstart.ipynb –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()